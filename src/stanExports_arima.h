// Generated by rstantools.  Do not edit by hand.

/*
    varstan is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    varstan is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with varstan.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.19.1
#include <stan/model/model_header.hpp>
namespace model_arima_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_arima");
    reader.add_event(233, 231, "end", "model_arima");
    return reader;
}
template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
dif(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x,
        const int& d, std::ostream* pstream__);
template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
dif(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x,
        const int& d, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 4;
        int n(0);
        (void) n;  // dummy to suppress unused var warning
        stan::math::fill(n, std::numeric_limits<int>::min());
        stan::math::assign(n,num_elements(x));
        current_statement_begin__ = 5;
        validate_non_negative_index("y", "(n - 1)", (n - 1));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> y((n - 1));
        stan::math::initialize(y, DUMMY_VAR__);
        stan::math::fill(y, DUMMY_VAR__);
        current_statement_begin__ = 6;
        for (int i = 1; i <= (n - 1); ++i) {
            current_statement_begin__ = 7;
            stan::model::assign(y, 
                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                        (get_base1(x, (i + 1), "x", 1) - get_base1(x, i, "x", 1)), 
                        "assigning variable y");
        }
        current_statement_begin__ = 9;
        if (as_bool(logical_eq((d - 1), 0))) {
            current_statement_begin__ = 10;
            return stan::math::promote_scalar<fun_return_scalar_t__>(y);
        } else {
            current_statement_begin__ = 12;
            return stan::math::promote_scalar<fun_return_scalar_t__>(dif(y, (d - 1), pstream__));
        }
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct dif_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x,
        const int& d, std::ostream* pstream__) const {
        return dif(x, d, pstream__);
    }
};
template <typename T0__, typename T1__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, 1>
idif(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x,
         const T1__& x0, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 15;
        int n(0);
        (void) n;  // dummy to suppress unused var warning
        stan::math::fill(n, std::numeric_limits<int>::min());
        stan::math::assign(n,num_elements(x));
        current_statement_begin__ = 16;
        validate_non_negative_index("y", "(n + 1)", (n + 1));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> y((n + 1));
        stan::math::initialize(y, DUMMY_VAR__);
        stan::math::fill(y, DUMMY_VAR__);
        current_statement_begin__ = 17;
        stan::model::assign(y, 
                    stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                    x0, 
                    "assigning variable y");
        current_statement_begin__ = 18;
        for (int i = 2; i <= (n + 1); ++i) {
            current_statement_begin__ = 19;
            stan::model::assign(y, 
                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                        (get_base1(y, (i - 1), "y", 1) + get_base1(x, (i - 1), "x", 1)), 
                        "assigning variable y");
        }
        current_statement_begin__ = 21;
        return stan::math::promote_scalar<fun_return_scalar_t__>(y);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct idif_functor__ {
    template <typename T0__, typename T1__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x,
         const T1__& x0, std::ostream* pstream__) const {
        return idif(x, x0, pstream__);
    }
};
template <typename T0__, typename T2__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T2__>::type, Eigen::Dynamic, 1>
complete(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x,
             const int& d,
             const T2__& x0, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 24;
        int n(0);
        (void) n;  // dummy to suppress unused var warning
        stan::math::fill(n, std::numeric_limits<int>::min());
        stan::math::assign(n,num_elements(x));
        current_statement_begin__ = 25;
        validate_non_negative_index("y", "d", d);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> y(d);
        stan::math::initialize(y, DUMMY_VAR__);
        stan::math::fill(y, DUMMY_VAR__);
        current_statement_begin__ = 26;
        if (as_bool(logical_lt(n, d))) {
            current_statement_begin__ = 27;
            for (int i = 1; i <= d; ++i) {
                current_statement_begin__ = 28;
                if (as_bool(logical_lte(i, n))) {
                    current_statement_begin__ = 28;
                    stan::model::assign(y, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                get_base1(x, i, "x", 1), 
                                "assigning variable y");
                } else {
                    current_statement_begin__ = 29;
                    stan::model::assign(y, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                x0, 
                                "assigning variable y");
                }
            }
        } else {
            current_statement_begin__ = 33;
            for (int i = 1; i <= d; ++i) {
                current_statement_begin__ = 34;
                stan::model::assign(y, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            get_base1(x, i, "x", 1), 
                            "assigning variable y");
            }
        }
        current_statement_begin__ = 36;
        return stan::math::promote_scalar<fun_return_scalar_t__>(y);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct complete_functor__ {
    template <typename T0__, typename T2__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T2__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x,
             const int& d,
             const T2__& x0, std::ostream* pstream__) const {
        return complete(x, d, x0, pstream__);
    }
};
template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
extract_vector_left(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x,
                        const int& d, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 39;
        int n(0);
        (void) n;  // dummy to suppress unused var warning
        stan::math::fill(n, std::numeric_limits<int>::min());
        stan::math::assign(n,num_elements(x));
        current_statement_begin__ = 40;
        if (as_bool(logical_lt(d, n))) {
            {
            current_statement_begin__ = 41;
            validate_non_negative_index("y", "d", d);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> y(d);
            stan::math::initialize(y, DUMMY_VAR__);
            stan::math::fill(y, DUMMY_VAR__);
            current_statement_begin__ = 42;
            for (int i = 1; i <= d; ++i) {
                current_statement_begin__ = 42;
                stan::model::assign(y, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            get_base1(x, i, "x", 1), 
                            "assigning variable y");
            }
            current_statement_begin__ = 43;
            return stan::math::promote_scalar<fun_return_scalar_t__>(y);
            }
        } else {
            current_statement_begin__ = 46;
            return stan::math::promote_scalar<fun_return_scalar_t__>(x);
        }
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct extract_vector_left_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x,
                        const int& d, std::ostream* pstream__) const {
        return extract_vector_left(x, d, pstream__);
    }
};
template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
extract_inits_dif(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x,
                      const int& d, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 49;
        validate_non_negative_index("x1", "(d + 1)", (d + 1));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> x1((d + 1));
        stan::math::initialize(x1, DUMMY_VAR__);
        stan::math::fill(x1, DUMMY_VAR__);
        stan::math::assign(x1,extract_vector_left(x, (d + 1), pstream__));
        current_statement_begin__ = 50;
        int n(0);
        (void) n;  // dummy to suppress unused var warning
        stan::math::fill(n, std::numeric_limits<int>::min());
        stan::math::assign(n,(d + 1));
        current_statement_begin__ = 51;
        validate_non_negative_index("y", "d", d);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> y(d);
        stan::math::initialize(y, DUMMY_VAR__);
        stan::math::fill(y, DUMMY_VAR__);
        current_statement_begin__ = 52;
        stan::model::assign(y, 
                    stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                    get_base1(x1, 1, "x1", 1), 
                    "assigning variable y");
        current_statement_begin__ = 53;
        for (int i = 1; i <= (d - 1); ++i) {
            {
            current_statement_begin__ = 54;
            validate_non_negative_index("z", "((d + 1) - i)", ((d + 1) - i));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> z(((d + 1) - i));
            stan::math::initialize(z, DUMMY_VAR__);
            stan::math::fill(z, DUMMY_VAR__);
            stan::math::assign(z,dif(x1, i, pstream__));
            current_statement_begin__ = 55;
            stan::model::assign(y, 
                        stan::model::cons_list(stan::model::index_uni((i + 1)), stan::model::nil_index_list()), 
                        get_base1(z, 1, "z", 1), 
                        "assigning variable y");
            }
        }
        current_statement_begin__ = 57;
        return stan::math::promote_scalar<fun_return_scalar_t__>(y);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct extract_inits_dif_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x,
                      const int& d, std::ostream* pstream__) const {
        return extract_inits_dif(x, d, pstream__);
    }
};
template <typename T0__, typename T2__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T2__>::type, Eigen::Dynamic, 1>
inv_dif(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x,
            const int& d,
            const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& x0, std::ostream* pstream__);
template <typename T0__, typename T2__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T2__>::type, Eigen::Dynamic, 1>
inv_dif(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x,
            const int& d,
            const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& x0, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 61;
        int n(0);
        (void) n;  // dummy to suppress unused var warning
        stan::math::fill(n, std::numeric_limits<int>::min());
        stan::math::assign(n,num_elements(x));
        current_statement_begin__ = 62;
        validate_non_negative_index("x1", "d", d);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> x1(d);
        stan::math::initialize(x1, DUMMY_VAR__);
        stan::math::fill(x1, DUMMY_VAR__);
        stan::math::assign(x1,complete(x0, d, 0.0, pstream__));
        current_statement_begin__ = 63;
        validate_non_negative_index("y", "(n + 1)", (n + 1));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> y((n + 1));
        stan::math::initialize(y, DUMMY_VAR__);
        stan::math::fill(y, DUMMY_VAR__);
        stan::math::assign(y,idif(x, get_base1(x1, d, "x1", 1), pstream__));
        current_statement_begin__ = 64;
        if (as_bool(logical_eq((d - 1), 0))) {
            current_statement_begin__ = 65;
            return stan::math::promote_scalar<fun_return_scalar_t__>(y);
        } else {
            current_statement_begin__ = 67;
            return stan::math::promote_scalar<fun_return_scalar_t__>(inv_dif(y, (d - 1), x1, pstream__));
        }
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct inv_dif_functor__ {
    template <typename T0__, typename T2__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T2__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& x,
            const int& d,
            const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& x0, std::ostream* pstream__) const {
        return inv_dif(x, d, x0, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_arima : public prob_grad {
private:
        int n;
        int p;
        int d;
        int q;
        vector_d y;
        vector_d prior_mu0;
        vector_d prior_sigma0;
        matrix_d prior_ar;
        matrix_d prior_ma;
        int s;
        int k;
        int h;
        matrix_d prior_arch;
        matrix_d prior_garch;
        matrix_d prior_mgarch;
        vector_d inits;
        int m;
        int tot_param;
        vector_d y_dif;
public:
    model_arima(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_arima(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_arima_namespace::model_arima";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 72;
            context__.validate_dims("data initialization", "n", "int", context__.to_vec());
            n = int(0);
            vals_i__ = context__.vals_i("n");
            pos__ = 0;
            n = vals_i__[pos__++];
            check_greater_or_equal(function__, "n", n, 0);
            current_statement_begin__ = 73;
            context__.validate_dims("data initialization", "p", "int", context__.to_vec());
            p = int(0);
            vals_i__ = context__.vals_i("p");
            pos__ = 0;
            p = vals_i__[pos__++];
            check_greater_or_equal(function__, "p", p, 0);
            current_statement_begin__ = 74;
            context__.validate_dims("data initialization", "d", "int", context__.to_vec());
            d = int(0);
            vals_i__ = context__.vals_i("d");
            pos__ = 0;
            d = vals_i__[pos__++];
            check_greater_or_equal(function__, "d", d, 0);
            current_statement_begin__ = 75;
            context__.validate_dims("data initialization", "q", "int", context__.to_vec());
            q = int(0);
            vals_i__ = context__.vals_i("q");
            pos__ = 0;
            q = vals_i__[pos__++];
            check_greater_or_equal(function__, "q", q, 0);
            current_statement_begin__ = 76;
            validate_non_negative_index("y", "n", n);
            context__.validate_dims("data initialization", "y", "vector_d", context__.to_vec(n));
            y = Eigen::Matrix<double, Eigen::Dynamic, 1>(n);
            vals_r__ = context__.vals_r("y");
            pos__ = 0;
            size_t y_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < y_j_1_max__; ++j_1__) {
                y(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 78;
            validate_non_negative_index("prior_mu0", "4", 4);
            context__.validate_dims("data initialization", "prior_mu0", "vector_d", context__.to_vec(4));
            prior_mu0 = Eigen::Matrix<double, Eigen::Dynamic, 1>(4);
            vals_r__ = context__.vals_r("prior_mu0");
            pos__ = 0;
            size_t prior_mu0_j_1_max__ = 4;
            for (size_t j_1__ = 0; j_1__ < prior_mu0_j_1_max__; ++j_1__) {
                prior_mu0(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 79;
            validate_non_negative_index("prior_sigma0", "4", 4);
            context__.validate_dims("data initialization", "prior_sigma0", "vector_d", context__.to_vec(4));
            prior_sigma0 = Eigen::Matrix<double, Eigen::Dynamic, 1>(4);
            vals_r__ = context__.vals_r("prior_sigma0");
            pos__ = 0;
            size_t prior_sigma0_j_1_max__ = 4;
            for (size_t j_1__ = 0; j_1__ < prior_sigma0_j_1_max__; ++j_1__) {
                prior_sigma0(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 80;
            validate_non_negative_index("prior_ar", "p", p);
            validate_non_negative_index("prior_ar", "4", 4);
            context__.validate_dims("data initialization", "prior_ar", "matrix_d", context__.to_vec(p,4));
            prior_ar = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(p, 4);
            vals_r__ = context__.vals_r("prior_ar");
            pos__ = 0;
            size_t prior_ar_j_2_max__ = 4;
            size_t prior_ar_j_1_max__ = p;
            for (size_t j_2__ = 0; j_2__ < prior_ar_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < prior_ar_j_1_max__; ++j_1__) {
                    prior_ar(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 81;
            validate_non_negative_index("prior_ma", "q", q);
            validate_non_negative_index("prior_ma", "4", 4);
            context__.validate_dims("data initialization", "prior_ma", "matrix_d", context__.to_vec(q,4));
            prior_ma = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(q, 4);
            vals_r__ = context__.vals_r("prior_ma");
            pos__ = 0;
            size_t prior_ma_j_2_max__ = 4;
            size_t prior_ma_j_1_max__ = q;
            for (size_t j_2__ = 0; j_2__ < prior_ma_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < prior_ma_j_1_max__; ++j_1__) {
                    prior_ma(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 82;
            context__.validate_dims("data initialization", "s", "int", context__.to_vec());
            s = int(0);
            vals_i__ = context__.vals_i("s");
            pos__ = 0;
            s = vals_i__[pos__++];
            check_greater_or_equal(function__, "s", s, 0);
            current_statement_begin__ = 83;
            context__.validate_dims("data initialization", "k", "int", context__.to_vec());
            k = int(0);
            vals_i__ = context__.vals_i("k");
            pos__ = 0;
            k = vals_i__[pos__++];
            check_greater_or_equal(function__, "k", k, 0);
            current_statement_begin__ = 84;
            context__.validate_dims("data initialization", "h", "int", context__.to_vec());
            h = int(0);
            vals_i__ = context__.vals_i("h");
            pos__ = 0;
            h = vals_i__[pos__++];
            check_greater_or_equal(function__, "h", h, 0);
            current_statement_begin__ = 85;
            validate_non_negative_index("prior_arch", "s", s);
            validate_non_negative_index("prior_arch", "4", 4);
            context__.validate_dims("data initialization", "prior_arch", "matrix_d", context__.to_vec(s,4));
            prior_arch = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(s, 4);
            vals_r__ = context__.vals_r("prior_arch");
            pos__ = 0;
            size_t prior_arch_j_2_max__ = 4;
            size_t prior_arch_j_1_max__ = s;
            for (size_t j_2__ = 0; j_2__ < prior_arch_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < prior_arch_j_1_max__; ++j_1__) {
                    prior_arch(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 86;
            validate_non_negative_index("prior_garch", "k", k);
            validate_non_negative_index("prior_garch", "4", 4);
            context__.validate_dims("data initialization", "prior_garch", "matrix_d", context__.to_vec(k,4));
            prior_garch = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(k, 4);
            vals_r__ = context__.vals_r("prior_garch");
            pos__ = 0;
            size_t prior_garch_j_2_max__ = 4;
            size_t prior_garch_j_1_max__ = k;
            for (size_t j_2__ = 0; j_2__ < prior_garch_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < prior_garch_j_1_max__; ++j_1__) {
                    prior_garch(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 87;
            validate_non_negative_index("prior_mgarch", "h", h);
            validate_non_negative_index("prior_mgarch", "4", 4);
            context__.validate_dims("data initialization", "prior_mgarch", "matrix_d", context__.to_vec(h,4));
            prior_mgarch = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(h, 4);
            vals_r__ = context__.vals_r("prior_mgarch");
            pos__ = 0;
            size_t prior_mgarch_j_2_max__ = 4;
            size_t prior_mgarch_j_1_max__ = h;
            for (size_t j_2__ = 0; j_2__ < prior_mgarch_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < prior_mgarch_j_1_max__; ++j_1__) {
                    prior_mgarch(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            // initialize transformed data variables
            current_statement_begin__ = 90;
            validate_non_negative_index("inits", "d", d);
            inits = Eigen::Matrix<double, Eigen::Dynamic, 1>(d);
            stan::math::fill(inits, DUMMY_VAR__);
            current_statement_begin__ = 91;
            m = int(0);
            stan::math::fill(m, std::numeric_limits<int>::min());
            stan::math::assign(m,(n - d));
            current_statement_begin__ = 92;
            tot_param = int(0);
            stan::math::fill(tot_param, std::numeric_limits<int>::min());
            stan::math::assign(tot_param,(p + q));
            current_statement_begin__ = 93;
            validate_non_negative_index("y_dif", "m", m);
            y_dif = Eigen::Matrix<double, Eigen::Dynamic, 1>(m);
            stan::math::fill(y_dif, DUMMY_VAR__);
            // execute transformed data statements
            current_statement_begin__ = 94;
            if (as_bool(logical_eq(d, 0))) {
                current_statement_begin__ = 95;
                stan::math::assign(y_dif, y);
                current_statement_begin__ = 96;
                stan::math::assign(inits, rep_vector(0, d));
            } else {
                current_statement_begin__ = 99;
                stan::math::assign(y_dif, dif(y, d, pstream__));
                current_statement_begin__ = 100;
                stan::math::assign(inits, extract_inits_dif(y, d, pstream__));
            }
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 104;
            validate_non_negative_index("phi0", "p", p);
            num_params_r__ += p;
            current_statement_begin__ = 105;
            validate_non_negative_index("theta0", "q", q);
            num_params_r__ += q;
            current_statement_begin__ = 106;
            num_params_r__ += 1;
            current_statement_begin__ = 107;
            num_params_r__ += 1;
            current_statement_begin__ = 108;
            validate_non_negative_index("alpha", "s", s);
            num_params_r__ += s;
            current_statement_begin__ = 109;
            validate_non_negative_index("beta", "k", k);
            num_params_r__ += k;
            current_statement_begin__ = 110;
            validate_non_negative_index("mgarch", "h", h);
            num_params_r__ += h;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_arima() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 104;
        if (!(context__.contains_r("phi0")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable phi0 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("phi0");
        pos__ = 0U;
        validate_non_negative_index("phi0", "p", p);
        context__.validate_dims("parameter initialization", "phi0", "vector_d", context__.to_vec(p));
        Eigen::Matrix<double, Eigen::Dynamic, 1> phi0(p);
        size_t phi0_j_1_max__ = p;
        for (size_t j_1__ = 0; j_1__ < phi0_j_1_max__; ++j_1__) {
            phi0(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(phi0);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable phi0: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 105;
        if (!(context__.contains_r("theta0")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable theta0 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("theta0");
        pos__ = 0U;
        validate_non_negative_index("theta0", "q", q);
        context__.validate_dims("parameter initialization", "theta0", "vector_d", context__.to_vec(q));
        Eigen::Matrix<double, Eigen::Dynamic, 1> theta0(q);
        size_t theta0_j_1_max__ = q;
        for (size_t j_1__ = 0; j_1__ < theta0_j_1_max__; ++j_1__) {
            theta0(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(theta0);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable theta0: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 106;
        if (!(context__.contains_r("sigma0")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma0 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma0");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma0", "double", context__.to_vec());
        double sigma0(0);
        sigma0 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigma0);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma0: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 107;
        if (!(context__.contains_r("mu0")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable mu0 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("mu0");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "mu0", "double", context__.to_vec());
        double mu0(0);
        mu0 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(mu0);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable mu0: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 108;
        if (!(context__.contains_r("alpha")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable alpha missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("alpha");
        pos__ = 0U;
        validate_non_negative_index("alpha", "s", s);
        context__.validate_dims("parameter initialization", "alpha", "vector_d", context__.to_vec(s));
        Eigen::Matrix<double, Eigen::Dynamic, 1> alpha(s);
        size_t alpha_j_1_max__ = s;
        for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
            alpha(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lub_unconstrain(0, 1, alpha);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable alpha: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 109;
        if (!(context__.contains_r("beta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta");
        pos__ = 0U;
        validate_non_negative_index("beta", "k", k);
        context__.validate_dims("parameter initialization", "beta", "vector_d", context__.to_vec(k));
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta(k);
        size_t beta_j_1_max__ = k;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            beta(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lub_unconstrain(0, 1, beta);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 110;
        if (!(context__.contains_r("mgarch")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable mgarch missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("mgarch");
        pos__ = 0U;
        validate_non_negative_index("mgarch", "h", h);
        context__.validate_dims("parameter initialization", "mgarch", "vector_d", context__.to_vec(h));
        Eigen::Matrix<double, Eigen::Dynamic, 1> mgarch(h);
        size_t mgarch_j_1_max__ = h;
        for (size_t j_1__ = 0; j_1__ < mgarch_j_1_max__; ++j_1__) {
            mgarch(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(mgarch);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable mgarch: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 104;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> phi0;
            (void) phi0;  // dummy to suppress unused var warning
            if (jacobian__)
                phi0 = in__.vector_constrain(p, lp__);
            else
                phi0 = in__.vector_constrain(p);
            current_statement_begin__ = 105;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> theta0;
            (void) theta0;  // dummy to suppress unused var warning
            if (jacobian__)
                theta0 = in__.vector_constrain(q, lp__);
            else
                theta0 = in__.vector_constrain(q);
            current_statement_begin__ = 106;
            local_scalar_t__ sigma0;
            (void) sigma0;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma0 = in__.scalar_lb_constrain(0, lp__);
            else
                sigma0 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 107;
            local_scalar_t__ mu0;
            (void) mu0;  // dummy to suppress unused var warning
            if (jacobian__)
                mu0 = in__.scalar_constrain(lp__);
            else
                mu0 = in__.scalar_constrain();
            current_statement_begin__ = 108;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> alpha;
            (void) alpha;  // dummy to suppress unused var warning
            if (jacobian__)
                alpha = in__.vector_lub_constrain(0, 1, s, lp__);
            else
                alpha = in__.vector_lub_constrain(0, 1, s);
            current_statement_begin__ = 109;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> beta;
            (void) beta;  // dummy to suppress unused var warning
            if (jacobian__)
                beta = in__.vector_lub_constrain(0, 1, k, lp__);
            else
                beta = in__.vector_lub_constrain(0, 1, k);
            current_statement_begin__ = 110;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> mgarch;
            (void) mgarch;  // dummy to suppress unused var warning
            if (jacobian__)
                mgarch = in__.vector_constrain(h, lp__);
            else
                mgarch = in__.vector_constrain(h);
            // transformed parameters
            current_statement_begin__ = 117;
            validate_non_negative_index("phi", "p", p);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> phi(p);
            stan::math::initialize(phi, DUMMY_VAR__);
            stan::math::fill(phi, DUMMY_VAR__);
            current_statement_begin__ = 118;
            validate_non_negative_index("theta", "q", q);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> theta(q);
            stan::math::initialize(theta, DUMMY_VAR__);
            stan::math::fill(theta, DUMMY_VAR__);
            current_statement_begin__ = 121;
            validate_non_negative_index("mu", "m", m);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> mu(m);
            stan::math::initialize(mu, DUMMY_VAR__);
            stan::math::fill(mu, DUMMY_VAR__);
            current_statement_begin__ = 122;
            validate_non_negative_index("epsilon", "m", m);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> epsilon(m);
            stan::math::initialize(epsilon, DUMMY_VAR__);
            stan::math::fill(epsilon, DUMMY_VAR__);
            current_statement_begin__ = 123;
            validate_non_negative_index("sigma", "m", m);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> sigma(m);
            stan::math::initialize(sigma, DUMMY_VAR__);
            stan::math::fill(sigma, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 129;
            for (int i = 1; i <= p; ++i) {
                current_statement_begin__ = 130;
                if (as_bool(logical_eq(get_base1(prior_ar, i, 4, "prior_ar", 1), 1))) {
                    current_statement_begin__ = 130;
                    stan::model::assign(phi, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                get_base1(phi0, i, "phi0", 1), 
                                "assigning variable phi");
                } else {
                    current_statement_begin__ = 131;
                    stan::model::assign(phi, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                ((2 * get_base1(phi0, i, "phi0", 1)) - 1), 
                                "assigning variable phi");
                }
            }
            current_statement_begin__ = 133;
            for (int i = 1; i <= q; ++i) {
                current_statement_begin__ = 134;
                if (as_bool(logical_eq(get_base1(prior_ma, i, 4, "prior_ma", 1), 1))) {
                    current_statement_begin__ = 134;
                    stan::model::assign(theta, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                get_base1(theta0, i, "theta0", 1), 
                                "assigning variable theta");
                } else {
                    current_statement_begin__ = 135;
                    stan::model::assign(theta, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                ((2 * get_base1(theta0, i, "theta0", 1)) - 1), 
                                "assigning variable theta");
                }
            }
            current_statement_begin__ = 142;
            for (int i = 1; i <= m; ++i) {
                current_statement_begin__ = 143;
                stan::model::assign(mu, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            mu0, 
                            "assigning variable mu");
                current_statement_begin__ = 144;
                stan::model::assign(sigma, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            sigma0, 
                            "assigning variable sigma");
                current_statement_begin__ = 146;
                if (as_bool(logical_gt(p, 0))) {
                    current_statement_begin__ = 146;
                    for (int j = 1; j <= p; ++j) {
                        current_statement_begin__ = 146;
                        if (as_bool(logical_gt(i, j))) {
                            current_statement_begin__ = 146;
                            stan::model::assign(mu, 
                                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                        (stan::model::rvalue(mu, stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), "mu") + (get_base1(y_dif, (i - j), "y_dif", 1) * get_base1(phi, j, "phi", 1))), 
                                        "assigning variable mu");
                        }
                    }
                }
                current_statement_begin__ = 148;
                if (as_bool(logical_gt(q, 0))) {
                    current_statement_begin__ = 148;
                    for (int j = 1; j <= q; ++j) {
                        current_statement_begin__ = 148;
                        if (as_bool(logical_gt(i, j))) {
                            current_statement_begin__ = 148;
                            stan::model::assign(mu, 
                                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                        (stan::model::rvalue(mu, stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), "mu") + (get_base1(epsilon, (i - j), "epsilon", 1) * get_base1(theta, j, "theta", 1))), 
                                        "assigning variable mu");
                        }
                    }
                }
                current_statement_begin__ = 149;
                stan::model::assign(epsilon, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (get_base1(y_dif, i, "y_dif", 1) - get_base1(mu, i, "mu", 1)), 
                            "assigning variable epsilon");
                current_statement_begin__ = 151;
                if (as_bool(logical_gte(s, k))) {
                    current_statement_begin__ = 153;
                    if (as_bool(logical_gt(s, 0))) {
                        current_statement_begin__ = 153;
                        for (int j = 1; j <= s; ++j) {
                            current_statement_begin__ = 153;
                            if (as_bool(logical_gt(i, j))) {
                                current_statement_begin__ = 153;
                                stan::model::assign(sigma, 
                                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                            (stan::model::rvalue(sigma, stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), "sigma") + (get_base1(alpha, j, "alpha", 1) * pow(get_base1(epsilon, (i - j), "epsilon", 1), 2))), 
                                            "assigning variable sigma");
                            }
                        }
                    }
                    current_statement_begin__ = 155;
                    if (as_bool(logical_gt(k, 0))) {
                        current_statement_begin__ = 155;
                        for (int j = 1; j <= k; ++j) {
                            current_statement_begin__ = 155;
                            if (as_bool(logical_gt(i, j))) {
                                current_statement_begin__ = 155;
                                stan::model::assign(sigma, 
                                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                            (stan::model::rvalue(sigma, stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), "sigma") + (get_base1(beta, j, "beta", 1) * pow(get_base1(sigma, (i - j), "sigma", 1), 2))), 
                                            "assigning variable sigma");
                            }
                        }
                    }
                }
                current_statement_begin__ = 157;
                stan::model::assign(sigma, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            stan::math::sqrt(get_base1(sigma, i, "sigma", 1)), 
                            "assigning variable sigma");
                current_statement_begin__ = 159;
                if (as_bool(logical_gt(h, 0))) {
                    current_statement_begin__ = 159;
                    for (int j = 1; j <= h; ++j) {
                        current_statement_begin__ = 159;
                        stan::model::assign(mu, 
                                    stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                    (stan::model::rvalue(mu, stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), "mu") + (get_base1(mgarch, i, "mgarch", 1) * get_base1(sigma, (i - j), "sigma", 1))), 
                                    "assigning variable mu");
                    }
                }
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 117;
            size_t phi_j_1_max__ = p;
            for (size_t j_1__ = 0; j_1__ < phi_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(phi(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: phi" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable phi: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 118;
            size_t theta_j_1_max__ = q;
            for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(theta(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: theta" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable theta: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 121;
            size_t mu_j_1_max__ = m;
            for (size_t j_1__ = 0; j_1__ < mu_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(mu(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: mu" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable mu: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 122;
            size_t epsilon_j_1_max__ = m;
            for (size_t j_1__ = 0; j_1__ < epsilon_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(epsilon(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: epsilon" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable epsilon: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 123;
            size_t sigma_j_1_max__ = m;
            for (size_t j_1__ = 0; j_1__ < sigma_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(sigma(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: sigma" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable sigma: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "sigma", sigma, 0);
            // model body
            current_statement_begin__ = 165;
            if (as_bool(logical_eq(get_base1(prior_mu0, 4, "prior_mu0", 1), 1))) {
                current_statement_begin__ = 165;
                lp_accum__.add(normal_log(mu0, get_base1(prior_mu0, 1, "prior_mu0", 1), get_base1(prior_mu0, 2, "prior_mu0", 1)));
            } else if (as_bool(logical_eq(get_base1(prior_mu0, 4, "prior_mu0", 1), 4))) {
                current_statement_begin__ = 166;
                lp_accum__.add(student_t_log(mu0, get_base1(prior_mu0, 3, "prior_mu0", 1), get_base1(prior_mu0, 1, "prior_mu0", 1), get_base1(prior_mu0, 2, "prior_mu0", 1)));
            } else if (as_bool(logical_eq(get_base1(prior_mu0, 4, "prior_mu0", 1), 5))) {
                current_statement_begin__ = 167;
                lp_accum__.add(cauchy_log(mu0, get_base1(prior_mu0, 1, "prior_mu0", 1), get_base1(prior_mu0, 2, "prior_mu0", 1)));
            }
            current_statement_begin__ = 170;
            if (as_bool(logical_eq(get_base1(prior_sigma0, 4, "prior_sigma0", 1), 1))) {
                current_statement_begin__ = 170;
                lp_accum__.add(normal_log(sigma0, get_base1(prior_sigma0, 1, "prior_sigma0", 1), get_base1(prior_sigma0, 2, "prior_sigma0", 1)));
            } else if (as_bool(logical_eq(get_base1(prior_sigma0, 4, "prior_sigma0", 1), 4))) {
                current_statement_begin__ = 171;
                lp_accum__.add(student_t_log(sigma0, get_base1(prior_sigma0, 3, "prior_sigma0", 1), get_base1(prior_sigma0, 1, "prior_sigma0", 1), get_base1(prior_sigma0, 2, "prior_sigma0", 1)));
            } else if (as_bool(logical_eq(get_base1(prior_sigma0, 4, "prior_sigma0", 1), 5))) {
                current_statement_begin__ = 172;
                lp_accum__.add(cauchy_log(sigma0, get_base1(prior_sigma0, 1, "prior_sigma0", 1), get_base1(prior_sigma0, 2, "prior_sigma0", 1)));
            } else if (as_bool(logical_eq(get_base1(prior_sigma0, 4, "prior_sigma0", 1), 6))) {
                current_statement_begin__ = 173;
                lp_accum__.add(inv_gamma_log(sigma0, get_base1(prior_sigma0, 1, "prior_sigma0", 1), get_base1(prior_sigma0, 2, "prior_sigma0", 1)));
            } else if (as_bool(logical_eq(get_base1(prior_sigma0, 4, "prior_sigma0", 1), 7))) {
                current_statement_begin__ = 174;
                lp_accum__.add(inv_chi_square_log(sigma0, get_base1(prior_sigma0, 3, "prior_sigma0", 1)));
            }
            current_statement_begin__ = 177;
            if (as_bool(logical_gt(p, 0))) {
                current_statement_begin__ = 178;
                for (int i = 1; i <= p; ++i) {
                    current_statement_begin__ = 179;
                    if (as_bool(logical_eq(get_base1(prior_ar, i, 4, "prior_ar", 1), 1))) {
                        current_statement_begin__ = 179;
                        lp_accum__.add(normal_log(get_base1(phi0, i, "phi0", 1), get_base1(prior_ar, i, 1, "prior_ar", 1), get_base1(prior_ar, i, 2, "prior_ar", 1)));
                    } else {
                        current_statement_begin__ = 180;
                        lp_accum__.add(beta_log(get_base1(phi0, i, "phi0", 1), get_base1(prior_ar, i, 1, "prior_ar", 1), get_base1(prior_ar, i, 1, "prior_ar", 1)));
                    }
                }
            }
            current_statement_begin__ = 184;
            if (as_bool(logical_gt(q, 0))) {
                current_statement_begin__ = 185;
                for (int i = 1; i <= q; ++i) {
                    current_statement_begin__ = 186;
                    if (as_bool(logical_eq(get_base1(prior_ma, i, 4, "prior_ma", 1), 1))) {
                        current_statement_begin__ = 186;
                        lp_accum__.add(normal_log(get_base1(theta0, i, "theta0", 1), get_base1(prior_ma, i, 1, "prior_ma", 1), get_base1(prior_ma, i, 2, "prior_ma", 1)));
                    } else {
                        current_statement_begin__ = 187;
                        lp_accum__.add(beta_log(get_base1(theta0, i, "theta0", 1), get_base1(prior_ma, i, 1, "prior_ma", 1), get_base1(prior_ma, i, 1, "prior_ma", 1)));
                    }
                }
            }
            current_statement_begin__ = 191;
            if (as_bool(logical_gt(s, 0))) {
                current_statement_begin__ = 192;
                for (int i = 1; i <= s; ++i) {
                    current_statement_begin__ = 193;
                    if (as_bool(logical_eq(get_base1(prior_arch, i, 4, "prior_arch", 1), 1))) {
                        current_statement_begin__ = 193;
                        lp_accum__.add(normal_log(get_base1(alpha, i, "alpha", 1), get_base1(prior_arch, i, 1, "prior_arch", 1), get_base1(prior_arch, i, 2, "prior_arch", 1)));
                    } else {
                        current_statement_begin__ = 194;
                        lp_accum__.add(beta_log(get_base1(alpha, i, "alpha", 1), get_base1(prior_arch, i, 1, "prior_arch", 1), get_base1(prior_arch, i, 2, "prior_arch", 1)));
                    }
                }
            }
            current_statement_begin__ = 198;
            if (as_bool(logical_gt(k, 0))) {
                current_statement_begin__ = 199;
                for (int i = 1; i <= k; ++i) {
                    current_statement_begin__ = 200;
                    if (as_bool(logical_eq(get_base1(prior_garch, i, 4, "prior_garch", 1), 1))) {
                        current_statement_begin__ = 200;
                        lp_accum__.add(normal_log(get_base1(beta, i, "beta", 1), get_base1(prior_garch, i, 1, "prior_garch", 1), get_base1(prior_garch, i, 2, "prior_garch", 1)));
                    } else {
                        current_statement_begin__ = 201;
                        lp_accum__.add(beta_log(get_base1(beta, i, "beta", 1), get_base1(prior_garch, i, 1, "prior_garch", 1), get_base1(prior_garch, i, 2, "prior_garch", 1)));
                    }
                }
            }
            current_statement_begin__ = 205;
            if (as_bool(logical_gt(h, 0))) {
                current_statement_begin__ = 206;
                for (int i = 1; i <= h; ++i) {
                    current_statement_begin__ = 207;
                    if (as_bool(logical_eq(get_base1(prior_mgarch, i, 4, "prior_mgarch", 1), 1))) {
                        current_statement_begin__ = 207;
                        lp_accum__.add(normal_log(get_base1(mgarch, i, "mgarch", 1), get_base1(prior_mgarch, i, 1, "prior_mgarch", 1), get_base1(prior_mgarch, i, 2, "prior_mgarch", 1)));
                    } else if (as_bool(logical_eq(get_base1(prior_mgarch, i, 4, "prior_mgarch", 1), 4))) {
                        current_statement_begin__ = 208;
                        lp_accum__.add(student_t_log(get_base1(mgarch, i, "mgarch", 1), get_base1(prior_mgarch, i, 3, "prior_mgarch", 1), get_base1(prior_mgarch, i, 1, "prior_mgarch", 1), get_base1(prior_mgarch, i, 2, "prior_mgarch", 1)));
                    } else if (as_bool(logical_eq(get_base1(prior_mgarch, i, 4, "prior_mgarch", 1), 5))) {
                        current_statement_begin__ = 209;
                        lp_accum__.add(cauchy_log(get_base1(mgarch, i, "mgarch", 1), get_base1(prior_mgarch, i, 1, "prior_mgarch", 1), get_base1(prior_mgarch, i, 2, "prior_mgarch", 1)));
                    } else if (as_bool(logical_eq(get_base1(prior_mgarch, i, 4, "prior_mgarch", 1), 2))) {
                        current_statement_begin__ = 210;
                        lp_accum__.add(beta_log(get_base1(mgarch, i, "mgarch", 1), get_base1(prior_mgarch, i, 1, "prior_mgarch", 1), get_base1(prior_mgarch, i, 2, "prior_mgarch", 1)));
                    }
                }
            }
            current_statement_begin__ = 214;
            lp_accum__.add(normal_log(epsilon, 0, sigma));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("phi0");
        names__.push_back("theta0");
        names__.push_back("sigma0");
        names__.push_back("mu0");
        names__.push_back("alpha");
        names__.push_back("beta");
        names__.push_back("mgarch");
        names__.push_back("phi");
        names__.push_back("theta");
        names__.push_back("mu");
        names__.push_back("epsilon");
        names__.push_back("sigma");
        names__.push_back("loglik");
        names__.push_back("log_lik");
        names__.push_back("fit");
        names__.push_back("residual");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(p);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(q);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(s);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(k);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(h);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(p);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(q);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(m);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(m);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(m);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(m);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_arima_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, 1> phi0 = in__.vector_constrain(p);
        size_t phi0_j_1_max__ = p;
        for (size_t j_1__ = 0; j_1__ < phi0_j_1_max__; ++j_1__) {
            vars__.push_back(phi0(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> theta0 = in__.vector_constrain(q);
        size_t theta0_j_1_max__ = q;
        for (size_t j_1__ = 0; j_1__ < theta0_j_1_max__; ++j_1__) {
            vars__.push_back(theta0(j_1__));
        }
        double sigma0 = in__.scalar_lb_constrain(0);
        vars__.push_back(sigma0);
        double mu0 = in__.scalar_constrain();
        vars__.push_back(mu0);
        Eigen::Matrix<double, Eigen::Dynamic, 1> alpha = in__.vector_lub_constrain(0, 1, s);
        size_t alpha_j_1_max__ = s;
        for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
            vars__.push_back(alpha(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta = in__.vector_lub_constrain(0, 1, k);
        size_t beta_j_1_max__ = k;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            vars__.push_back(beta(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> mgarch = in__.vector_constrain(h);
        size_t mgarch_j_1_max__ = h;
        for (size_t j_1__ = 0; j_1__ < mgarch_j_1_max__; ++j_1__) {
            vars__.push_back(mgarch(j_1__));
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 117;
            validate_non_negative_index("phi", "p", p);
            Eigen::Matrix<double, Eigen::Dynamic, 1> phi(p);
            stan::math::initialize(phi, DUMMY_VAR__);
            stan::math::fill(phi, DUMMY_VAR__);
            current_statement_begin__ = 118;
            validate_non_negative_index("theta", "q", q);
            Eigen::Matrix<double, Eigen::Dynamic, 1> theta(q);
            stan::math::initialize(theta, DUMMY_VAR__);
            stan::math::fill(theta, DUMMY_VAR__);
            current_statement_begin__ = 121;
            validate_non_negative_index("mu", "m", m);
            Eigen::Matrix<double, Eigen::Dynamic, 1> mu(m);
            stan::math::initialize(mu, DUMMY_VAR__);
            stan::math::fill(mu, DUMMY_VAR__);
            current_statement_begin__ = 122;
            validate_non_negative_index("epsilon", "m", m);
            Eigen::Matrix<double, Eigen::Dynamic, 1> epsilon(m);
            stan::math::initialize(epsilon, DUMMY_VAR__);
            stan::math::fill(epsilon, DUMMY_VAR__);
            current_statement_begin__ = 123;
            validate_non_negative_index("sigma", "m", m);
            Eigen::Matrix<double, Eigen::Dynamic, 1> sigma(m);
            stan::math::initialize(sigma, DUMMY_VAR__);
            stan::math::fill(sigma, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 129;
            for (int i = 1; i <= p; ++i) {
                current_statement_begin__ = 130;
                if (as_bool(logical_eq(get_base1(prior_ar, i, 4, "prior_ar", 1), 1))) {
                    current_statement_begin__ = 130;
                    stan::model::assign(phi, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                get_base1(phi0, i, "phi0", 1), 
                                "assigning variable phi");
                } else {
                    current_statement_begin__ = 131;
                    stan::model::assign(phi, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                ((2 * get_base1(phi0, i, "phi0", 1)) - 1), 
                                "assigning variable phi");
                }
            }
            current_statement_begin__ = 133;
            for (int i = 1; i <= q; ++i) {
                current_statement_begin__ = 134;
                if (as_bool(logical_eq(get_base1(prior_ma, i, 4, "prior_ma", 1), 1))) {
                    current_statement_begin__ = 134;
                    stan::model::assign(theta, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                get_base1(theta0, i, "theta0", 1), 
                                "assigning variable theta");
                } else {
                    current_statement_begin__ = 135;
                    stan::model::assign(theta, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                ((2 * get_base1(theta0, i, "theta0", 1)) - 1), 
                                "assigning variable theta");
                }
            }
            current_statement_begin__ = 142;
            for (int i = 1; i <= m; ++i) {
                current_statement_begin__ = 143;
                stan::model::assign(mu, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            mu0, 
                            "assigning variable mu");
                current_statement_begin__ = 144;
                stan::model::assign(sigma, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            sigma0, 
                            "assigning variable sigma");
                current_statement_begin__ = 146;
                if (as_bool(logical_gt(p, 0))) {
                    current_statement_begin__ = 146;
                    for (int j = 1; j <= p; ++j) {
                        current_statement_begin__ = 146;
                        if (as_bool(logical_gt(i, j))) {
                            current_statement_begin__ = 146;
                            stan::model::assign(mu, 
                                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                        (stan::model::rvalue(mu, stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), "mu") + (get_base1(y_dif, (i - j), "y_dif", 1) * get_base1(phi, j, "phi", 1))), 
                                        "assigning variable mu");
                        }
                    }
                }
                current_statement_begin__ = 148;
                if (as_bool(logical_gt(q, 0))) {
                    current_statement_begin__ = 148;
                    for (int j = 1; j <= q; ++j) {
                        current_statement_begin__ = 148;
                        if (as_bool(logical_gt(i, j))) {
                            current_statement_begin__ = 148;
                            stan::model::assign(mu, 
                                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                        (stan::model::rvalue(mu, stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), "mu") + (get_base1(epsilon, (i - j), "epsilon", 1) * get_base1(theta, j, "theta", 1))), 
                                        "assigning variable mu");
                        }
                    }
                }
                current_statement_begin__ = 149;
                stan::model::assign(epsilon, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (get_base1(y_dif, i, "y_dif", 1) - get_base1(mu, i, "mu", 1)), 
                            "assigning variable epsilon");
                current_statement_begin__ = 151;
                if (as_bool(logical_gte(s, k))) {
                    current_statement_begin__ = 153;
                    if (as_bool(logical_gt(s, 0))) {
                        current_statement_begin__ = 153;
                        for (int j = 1; j <= s; ++j) {
                            current_statement_begin__ = 153;
                            if (as_bool(logical_gt(i, j))) {
                                current_statement_begin__ = 153;
                                stan::model::assign(sigma, 
                                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                            (stan::model::rvalue(sigma, stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), "sigma") + (get_base1(alpha, j, "alpha", 1) * pow(get_base1(epsilon, (i - j), "epsilon", 1), 2))), 
                                            "assigning variable sigma");
                            }
                        }
                    }
                    current_statement_begin__ = 155;
                    if (as_bool(logical_gt(k, 0))) {
                        current_statement_begin__ = 155;
                        for (int j = 1; j <= k; ++j) {
                            current_statement_begin__ = 155;
                            if (as_bool(logical_gt(i, j))) {
                                current_statement_begin__ = 155;
                                stan::model::assign(sigma, 
                                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                            (stan::model::rvalue(sigma, stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), "sigma") + (get_base1(beta, j, "beta", 1) * pow(get_base1(sigma, (i - j), "sigma", 1), 2))), 
                                            "assigning variable sigma");
                            }
                        }
                    }
                }
                current_statement_begin__ = 157;
                stan::model::assign(sigma, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            stan::math::sqrt(get_base1(sigma, i, "sigma", 1)), 
                            "assigning variable sigma");
                current_statement_begin__ = 159;
                if (as_bool(logical_gt(h, 0))) {
                    current_statement_begin__ = 159;
                    for (int j = 1; j <= h; ++j) {
                        current_statement_begin__ = 159;
                        stan::model::assign(mu, 
                                    stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                    (stan::model::rvalue(mu, stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), "mu") + (get_base1(mgarch, i, "mgarch", 1) * get_base1(sigma, (i - j), "sigma", 1))), 
                                    "assigning variable mu");
                    }
                }
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 123;
            check_greater_or_equal(function__, "sigma", sigma, 0);
            // write transformed parameters
            if (include_tparams__) {
                size_t phi_j_1_max__ = p;
                for (size_t j_1__ = 0; j_1__ < phi_j_1_max__; ++j_1__) {
                    vars__.push_back(phi(j_1__));
                }
                size_t theta_j_1_max__ = q;
                for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
                    vars__.push_back(theta(j_1__));
                }
                size_t mu_j_1_max__ = m;
                for (size_t j_1__ = 0; j_1__ < mu_j_1_max__; ++j_1__) {
                    vars__.push_back(mu(j_1__));
                }
                size_t epsilon_j_1_max__ = m;
                for (size_t j_1__ = 0; j_1__ < epsilon_j_1_max__; ++j_1__) {
                    vars__.push_back(epsilon(j_1__));
                }
                size_t sigma_j_1_max__ = m;
                for (size_t j_1__ = 0; j_1__ < sigma_j_1_max__; ++j_1__) {
                    vars__.push_back(sigma(j_1__));
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 217;
            double loglik;
            (void) loglik;  // dummy to suppress unused var warning
            stan::math::initialize(loglik, DUMMY_VAR__);
            stan::math::fill(loglik, DUMMY_VAR__);
            stan::math::assign(loglik,0);
            current_statement_begin__ = 218;
            validate_non_negative_index("log_lik", "m", m);
            Eigen::Matrix<double, Eigen::Dynamic, 1> log_lik(m);
            stan::math::initialize(log_lik, DUMMY_VAR__);
            stan::math::fill(log_lik, DUMMY_VAR__);
            current_statement_begin__ = 219;
            validate_non_negative_index("fit", "n", n);
            Eigen::Matrix<double, Eigen::Dynamic, 1> fit(n);
            stan::math::initialize(fit, DUMMY_VAR__);
            stan::math::fill(fit, DUMMY_VAR__);
            current_statement_begin__ = 220;
            validate_non_negative_index("residual", "n", n);
            Eigen::Matrix<double, Eigen::Dynamic, 1> residual(n);
            stan::math::initialize(residual, DUMMY_VAR__);
            stan::math::fill(residual, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 222;
            for (int i = 1; i <= n; ++i) {
                current_statement_begin__ = 223;
                if (as_bool(logical_lte(i, d))) {
                    current_statement_begin__ = 223;
                    stan::model::assign(residual, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                0, 
                                "assigning variable residual");
                } else {
                    current_statement_begin__ = 224;
                    stan::model::assign(residual, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                get_base1(epsilon, (i - d), "epsilon", 1), 
                                "assigning variable residual");
                }
                current_statement_begin__ = 225;
                stan::model::assign(fit, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (get_base1(y, i, "y", 1) - get_base1(residual, i, "residual", 1)), 
                            "assigning variable fit");
                current_statement_begin__ = 226;
                if (as_bool(logical_lte(i, m))) {
                    current_statement_begin__ = 227;
                    stan::model::assign(log_lik, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                normal_log(get_base1(y_dif, i, "y_dif", 1), get_base1(mu, i, "mu", 1), get_base1(sigma, i, "sigma", 1)), 
                                "assigning variable log_lik");
                    current_statement_begin__ = 228;
                    stan::math::assign(loglik, (loglik + get_base1(log_lik, i, "log_lik", 1)));
                }
            }
            // validate, write generated quantities
            current_statement_begin__ = 217;
            vars__.push_back(loglik);
            current_statement_begin__ = 218;
            size_t log_lik_j_1_max__ = m;
            for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
                vars__.push_back(log_lik(j_1__));
            }
            current_statement_begin__ = 219;
            size_t fit_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < fit_j_1_max__; ++j_1__) {
                vars__.push_back(fit(j_1__));
            }
            current_statement_begin__ = 220;
            size_t residual_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < residual_j_1_max__; ++j_1__) {
                vars__.push_back(residual(j_1__));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    static std::string model_name() {
        return "model_arima";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t phi0_j_1_max__ = p;
        for (size_t j_1__ = 0; j_1__ < phi0_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "phi0" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t theta0_j_1_max__ = q;
        for (size_t j_1__ = 0; j_1__ < theta0_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta0" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma0";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu0";
        param_names__.push_back(param_name_stream__.str());
        size_t alpha_j_1_max__ = s;
        for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t beta_j_1_max__ = k;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t mgarch_j_1_max__ = h;
        for (size_t j_1__ = 0; j_1__ < mgarch_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mgarch" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t phi_j_1_max__ = p;
            for (size_t j_1__ = 0; j_1__ < phi_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "phi" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t theta_j_1_max__ = q;
            for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t mu_j_1_max__ = m;
            for (size_t j_1__ = 0; j_1__ < mu_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t epsilon_j_1_max__ = m;
            for (size_t j_1__ = 0; j_1__ < epsilon_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "epsilon" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t sigma_j_1_max__ = m;
            for (size_t j_1__ = 0; j_1__ < sigma_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "sigma" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "loglik";
        param_names__.push_back(param_name_stream__.str());
        size_t log_lik_j_1_max__ = m;
        for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t fit_j_1_max__ = n;
        for (size_t j_1__ = 0; j_1__ < fit_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "fit" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t residual_j_1_max__ = n;
        for (size_t j_1__ = 0; j_1__ < residual_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "residual" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t phi0_j_1_max__ = p;
        for (size_t j_1__ = 0; j_1__ < phi0_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "phi0" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t theta0_j_1_max__ = q;
        for (size_t j_1__ = 0; j_1__ < theta0_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta0" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma0";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu0";
        param_names__.push_back(param_name_stream__.str());
        size_t alpha_j_1_max__ = s;
        for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t beta_j_1_max__ = k;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t mgarch_j_1_max__ = h;
        for (size_t j_1__ = 0; j_1__ < mgarch_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mgarch" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t phi_j_1_max__ = p;
            for (size_t j_1__ = 0; j_1__ < phi_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "phi" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t theta_j_1_max__ = q;
            for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t mu_j_1_max__ = m;
            for (size_t j_1__ = 0; j_1__ < mu_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t epsilon_j_1_max__ = m;
            for (size_t j_1__ = 0; j_1__ < epsilon_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "epsilon" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t sigma_j_1_max__ = m;
            for (size_t j_1__ = 0; j_1__ < sigma_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "sigma" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "loglik";
        param_names__.push_back(param_name_stream__.str());
        size_t log_lik_j_1_max__ = m;
        for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t fit_j_1_max__ = n;
        for (size_t j_1__ = 0; j_1__ < fit_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "fit" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t residual_j_1_max__ = n;
        for (size_t j_1__ = 0; j_1__ < residual_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "residual" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
}; // model
}  // namespace
typedef model_arima_namespace::model_arima stan_model;
#endif
